#!/bin/bash
set -x -e -o pipefail
file_path="$1"

if [ -z "$file_path" ]; then
    echo "Usage: $0 <file_path> [timeout]" >&2
    exit 1
fi

PIPE=$(mktemp -u /tmp/inotify_pipe.XXXXXX)
mkfifo "$PIPE"


file_name=$(basename "$file_path")
if [ -z "$2" ];then
    TIMEOUT=10
else
    TIMEOUT=$2
fi
echo "timeout is $TIMEOUT seconds" >&2
inotifywait --timeout $TIMEOUT -m -e create -e moved_to $(dirname "$file_path") -o "$PIPE" -q &
INOTIFY_PID=$!
cleanup() {
    echo "Cleaning up inotify pid $INOTIFY_PID" >&2
    kill $INOTIFY_PID || true
    wait $INOTIFY_PID || true
    echo "Cleaning up pipe $PIPE" >&2
    rm -f "$PIPE"
}
trap cleanup EXIT  
trap cleanup TERM 
trap cleanup INT

TIMED_OUT=TRUE
EXECUTED=FALSE
while read -r dir action file  < "$PIPE"; do
    if [ "$file" == "$file_name" ]; then
        echo "File $file_name created in $(dirname "$file_path")" >&2
        TIMED_OUT=FALSE
        EXECUTED=TRUE
        break
    fi
done
if [ "$TIMED_OUT" == "TRUE" ]; then
    echo "Timed out waiting for $file_name to be created in $(dirname "$file_path")" >&2
    # signal retry to client
    if [ "$EXECUTED" == "FALSE" ]; then
        exit 169
    fi
    exit 1
fi
echo $(basename $(readlink -f "$file_path"))
cat "$file_path"
exit 0